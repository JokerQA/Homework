{
	"info": {
		"_postman_id": "a4713c22-461d-4b6e-8c24-ac3cce2ac390",
		"name": "homework3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Ответ парсим в JSON\r",
							"let response_body = pm.response.json();\r",
							"\r",
							"// Установка токена в окружение\r",
							"pm.environment.set(\"token\", response_body.token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Chatrix",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwe123rty",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Ответ парсим в JSON\r",
							"let response_body = pm.response.json();\r",
							"\r",
							"//Запрос парсим в JSON\r",
							"let request_body = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"// Переменной shema присвоили нашу JSON схему\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ],\r",
							"      \"additionalProperties\":false\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ],\r",
							"  \"additionalProperties\":false\r",
							"};\r",
							"\r",
							"//Сравниваем ответ и схему\r",
							"pm.test('Schema validation', function () {\r",
							"    pm.expect(tv4.validate(response_body, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// проверка зарплаты после 6 месяцев\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(request_body.salary*2).to.eql(response_body.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"// проверка зарплаты после 12 месяцев\r",
							"pm.test(\" 'qa_salary_after_12_months\", function () {\r",
							"    pm.expect(request_body.salary*2.9).to.eql(response_body.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"// проверка зарплаты после 1.5 года\r",
							"pm.test(\"u_salary_1.5_year\", function () {\r",
							"    pm.expect(request_body.salary*4).to.eql(response_body.person.u_salary_1_5_year);\r",
							"});\r",
							"\r",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005 get_test_user\r",
							"pm.environment.set(\"salary\", response_body.person.u_salary_1_5_year);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Vlad\",\"age\":26,\"salary\":50000,\"auth_token\":\"{{token}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Ответ парсим в JSON\r",
							"let response_body = pm.response.json();\r",
							"\r",
							"//Запрос парсим в JSON и достаем поле salary\r",
							"let request_body = pm.request.body.formdata.get(\"salary\");\r",
							"\r",
							"let schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ],\r",
							"  \"additionalProperties\":false\r",
							"};\r",
							"\r",
							"\r",
							"//Сравниваем ответ и схему\r",
							"pm.test('Schema validation', function () {\r",
							"    pm.expect(tv4.validate(response_body, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// str(salary*2)\r",
							"pm.test(\"str(salary*2)\", function () {\r",
							"    pm.expect(request_body*2).to.eql(parseInt(response_body.salary[1]));\r",
							"});\r",
							"\r",
							"// str(salary*3)\r",
							"pm.test(\"str(salary*3)\", function () {\r",
							"    pm.expect(request_body*3).to.eql(parseInt(response_body.salary[2]));\r",
							"});\r",
							"\r",
							"// проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Validate elements\", function () {\r",
							"  pm.expect(parseInt(response_body.salary[2])).to.be.above(parseInt(response_body.salary[1]))\r",
							"  pm.expect(parseInt(response_body.salary[2])).to.be.above(parseInt(response_body.salary[0]))\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vlad",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "50000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let response_body = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ],\r",
							"  \"additionalProperties\":false\r",
							"};\r",
							"\r",
							"// Сравниваем ответ и схему\r",
							"pm.test('Schema validation', function () {\r",
							"    pm.expect(tv4.validate(response_body, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// daily_food':weight * 0.012\r",
							"pm.test(\"daily_food':weight * 0.012\", function () {\r",
							"    pm.expect(pm.request.body.formdata.get(\"weight\")*0.012).to.eql(response_body.daily_food);\r",
							"});\r",
							"\r",
							"// daily_sleep': weight * 2.5\r",
							"pm.test(\"daily_sleep': weight * 2.5\", function () {\r",
							"    pm.expect(pm.request.body.formdata.get(\"weight\")*2.5).to.eql(response_body.daily_sleep);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vlad",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "67",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let response_body = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ],\r",
							"      \"additionalProperties\":false\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"  ,\r",
							"  \"additionalProperties\":false\r",
							"};\r",
							"\r",
							"// Сравнием схему и ответ JSON\r",
							"pm.test('Schema validation', function () {\r",
							"    pm.expect(tv4.validate(response_body, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить что значение поля name = значению переменной name из окружения\", function () {\r",
							"    pm.expect(response_body.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\", function () {\r",
							"    pm.expect(response_body.age).to.eql(pm.request.body.formdata.get(\"age\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vlad",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let response_body = pm.response.json();\r",
							"\r",
							"//Функция для int числа\r",
							"function getRandomInt(max) {\r",
							"  return Math.floor(Math.random() * max);\r",
							"}\r",
							"\r",
							"let count = getRandomInt(response_body.length);\r",
							"\r",
							"pm.environment.set(\"curr_code\", response_body[count].Cur_ID);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"if (pm.response.code == 500) {\r",
							"    console.log(\"Ошибка сервера переотправьте запрос\")\r",
							"\r",
							"} else {\r",
							"\r",
							"let response_body = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ],\r",
							"  \"additionalProperties\":false\r",
							"};\r",
							"\r",
							"pm.test('Schema validation', function () {\r",
							"    pm.expect(tv4.validate(response_body, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"console.log(\"Запрос успешно обработан\")\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency_testing***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json.\r",
							"var response_body = pm.response.json();\r",
							"var count = 1;\r",
							"var respCount = response_body.length;\r",
							"var data = []\r",
							"\r",
							"for (let i = 0; i < respCount; i++) { \r",
							"\r",
							"const req = {\r",
							"    url:'162.55.220.72:5005/curr_byn',\r",
							"    method: 'POST',\r",
							"    header: {},\r",
							"    body: {\r",
							"        mode:'formdata',\r",
							"        formdata: [\r",
							"            {\"key\": \"auth_token\", \"value\" : pm.environment.get(\"token\")},\r",
							"            {\"key\":\"curr_code\", \"value\" : response_body[i].Cur_ID}\r",
							"        ]}\r",
							"}\r",
							"\r",
							"pm.sendRequest(req, function(err,resp2){\r",
							"    if (resp2.code === 200){\r",
							"        if(JSON.parse(resp2.stream.toString()).Cur_OfficialRate !== undefined){\r",
							"            data.push(JSON.parse(resp2.stream.toString()))\r",
							"        }\r",
							"      \r",
							"    }\r",
							"   Result();\r",
							"})\r",
							"\r",
							"}\r",
							"function Result(){\r",
							"    if(count < respCount){\r",
							"        count ++;\r",
							"\r",
							"    } else {\r",
							"        console.log(data)\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}